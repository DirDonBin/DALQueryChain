// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using DALQueryChain.Interfaces;
using LinqToDB;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace ManualTest.Linq2Db.Context
{
	public static partial class IdentitySchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<Role>         Roles         => _dataContext.GetTable<Role>();
			public ITable<UsersSetting> UsersSettings => _dataContext.GetTable<UsersSetting>();
			public ITable<User>         Users         => _dataContext.GetTable<User>();
			public ITable<RefreshToken> RefreshTokens => _dataContext.GetTable<RefreshToken>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table("Roles", Schema = "identity")]
		public class Role : IDbModelBase
		{
			[Column("Id"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int    Id   { get; set; } // integer
			[Column("Name", CanBeNull    = false                                                             )] public string Name { get; set; } = null!; // character varying(150)

			#region Associations
			/// <summary>
			/// FK_Users_RoleId_Roles_Id backreference
			/// </summary>
			[Association(ThisKey = nameof(Id), OtherKey = nameof(User.RoleId))]
			public List<User> UsersRoleIdIds { get; set; } = null!;
			#endregion
		}

		[Table("UsersSettings", Schema = "identity")]
		public class UsersSetting : IDbModelBase
		{
			[Column("Id"                    , IsPrimaryKey = true )] public long     Id                     { get; set; } // bigint
			[Column("Name"                  , CanBeNull    = false)] public string   Name                   { get; set; } = null!; // text
			[Column("Avatar"                , CanBeNull    = false)] public string   Avatar                 { get; set; } = null!; // text
			[Column("DarkTheme"                                   )] public bool     DarkTheme              { get; set; } // boolean
			[Column("WorkStatus"                                  )] public short    WorkStatus             { get; set; } // smallint
			[Column("Language"              , CanBeNull    = false)] public string   Language               { get; set; } = null!; // text
			[Column("TimeZone"              , CanBeNull    = false)] public string   TimeZone               { get; set; } = null!; // text
			[Column("DateFormat"            , CanBeNull    = false)] public string   DateFormat             { get; set; } = null!; // text
			[Column("TimeFormat"                                  )] public short    TimeFormat             { get; set; } // smallint
			[Column("NotificationsType"                           )] public short    NotificationsType      { get; set; } // smallint
			[Column("NotificationsDays"                           )] public short    NotificationsDays      { get; set; } // smallint
			[Column("NotificationsStartTime"                      )] public TimeSpan NotificationsStartTime { get; set; } // time without time zone
			[Column("NotificationsEndTime"                        )] public TimeSpan NotificationsEndTime   { get; set; } // time without time zone
			[Column("NotificationsSound"                          )] public bool     NotificationsSound     { get; set; } // boolean
			[Column("NotificationsDisable"                        )] public bool     NotificationsDisable   { get; set; } // boolean

			#region Associations
			/// <summary>
			/// FK_UsersSettings_Id_Users_Id
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(Id), OtherKey = nameof(User.Id))]
			public User FkUsersSettingsIdUsersId { get; set; } = null!;
			#endregion
		}

		[Table("Users", Schema = "identity")]
		public class User : IDbModelBase
		{
			[Column("Id"               , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id                { get; set; } // bigint
			[Column("RoleId"                                                                                              )] public int       RoleId            { get; set; } // integer
			[Column("AccessFailedCount"                                                                                   )] public int       AccessFailedCount { get; set; } // integer
			[Column("Email"                                                                                               )] public string?   Email             { get; set; } // character varying(350)
			[Column("EmailConfirmed"                                                                                      )] public bool      EmailConfirmed    { get; set; } // boolean
			[Column("PasswordHash"     , CanBeNull    = false                                                             )] public string    PasswordHash      { get; set; } = null!; // text
			[Column("Salt"             , CanBeNull    = false                                                             )] public string    Salt              { get; set; } = null!; // text
			[Column("Username"         , CanBeNull    = false                                                             )] public string    Username          { get; set; } = null!; // text
			[Column("Phone"                                                                                               )] public string?   Phone             { get; set; } // character varying(30)
			[Column("PhoneConfirmed"                                                                                      )] public bool      PhoneConfirmed    { get; set; } // boolean
			[Column("CreateAt"                                                                                            )] public DateTime  CreateAt          { get; set; } // timestamp (6) without time zone
			[Column("ModifyAt"                                                                                            )] public DateTime  ModifyAt          { get; set; } // timestamp (6) without time zone
			[Column("DeleteAt"                                                                                            )] public DateTime? DeleteAt          { get; set; } // timestamp (6) without time zone
			[Column("TwoFactorType"                                                                                       )] public short     TwoFactorType     { get; set; } // smallint

			#region Associations
			/// <summary>
			/// FK_UsersSettings_Id_Users_Id backreference
			/// </summary>
			[Association(ThisKey = nameof(Id), OtherKey = nameof(UsersSetting.Id))]
			public UsersSetting? UsersSettingsIdId { get; set; }

			/// <summary>
			/// FK_Users_RoleId_Roles_Id
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(RoleId), OtherKey = nameof(IdentitySchema.Role.Id))]
			public Role Role { get; set; } = null!;

			/// <summary>
			/// FK_RefreshTokens_UserId_Users_Id backreference
			/// </summary>
			[Association(ThisKey = nameof(Id), OtherKey = nameof(RefreshToken.UserId))]
			public List<RefreshToken> RefreshTokensUserIdIds { get; set; } = null!;
			#endregion
		}

		[Table("RefreshTokens", Schema = "identity")]
		public class RefreshToken : IDbModelBase
		{
			[Column("Id"       , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id        { get; set; } // bigint
			[Column("UserId"                                                                                      )] public long      UserId    { get; set; } // bigint
			[Column("Token"    , CanBeNull    = false                                                             )] public string    Token     { get; set; } = null!; // text
			[Column("ExpiryAt"                                                                                    )] public DateTime  ExpiryAt  { get; set; } // timestamp (6) without time zone
			[Column("CreateAt"                                                                                    )] public DateTime  CreateAt  { get; set; } // timestamp (6) without time zone
			[Column("ModifyAt"                                                                                    )] public DateTime  ModifyAt  { get; set; } // timestamp (6) without time zone
			[Column("RevokedAt"                                                                                   )] public DateTime? RevokedAt { get; set; } // timestamp (6) without time zone

			#region Associations
			/// <summary>
			/// FK_RefreshTokens_UserId_Users_Id
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(UserId), OtherKey = nameof(IdentitySchema.User.Id))]
			public User User { get; set; } = null!;
			#endregion
		}
	}
}
